
primary constructor:
class Foo(bar: Int)
bar: Int  is barely a constructor parameter. If this variable is not used anywhere except the constructor, it remains there. 
No field is generated. Otherwise private val bar field is created and value of bar parameter is assigned to it. 
No getter is created

class Foo(private val bar: Int)
Such declaration of parameter will create private val bar field with private getter. This behavior is the same as above no 
matter if the parameter was used beside the constructor (e.g. in toString() or not).

class Person(name: String, age: Int) { println(name + " has age: " + age) }
val p1 = new Person("Sam", 20)
Sam has age: 20
p1: Person = Person@532760d8
p1.name  // error: value name is not a member of Person

class Person(val name: String, val age: Int) { println(name + " has age: " + age) }
val p1 = new Person("Sam", 20)
Sam has age: 20
p1.name
res1: String = Sam

class without primary constructor
class Person {  private var name = "" ;  private var age = 0  }
val p2 = new Person
p2.name   // error: variable name in class Person cannot be accessed in Person

class = Person { var name = ""; var age = 0 }
var p2 = new Person
p2.name   // res4: String = ""
p2.name = "Sam"   // p2.name: String = Sam

auxiliary constructor
called this, and must start with a call to either primary constructor or previous defined auxiliary
class Person {
  private var name = ""
  private var age = 0
  
  def this(name: String) {
     this()
     this.name = name
  }
  def this(name: String, age: Int) {
     this()
     this.name = name
     this.age = age
  }
}

object
similar to factory method, has same with class, at same source file with class, and don't use new when define instance
class MyString(val jString:String) { private var extraData = ""; override def toString = jString+extraData }  
object MyString {
    def apply(base:String, extras:String) = { val s = new MyString(base);  s.extraData = extras; s }   
    def apply(base:String) = new MyString(base) 
} 
val a = MyString("A", "B"); println(a)
val b = new MyString("c") ; println(b)

abstract class and case class
abstract class Amount
case class Dollar(value: Double) extends Amount
case class Currency(vale: Double, unit: String) extends Amount

val amt1 = Dollar(29.95) // no new is needed
val amt2 = Currency(30.01, "EUR")
def checkType(amt: Any) {
   amt match {
     case Dollar(v) => println(s"$v")
     case Currency(_, u) => println(s"Oh noes, I got $u")
     case _ => println("nothing")
  }
}
checkType(amt1)
checkType(amt2)

//assignment: Scala impatient

class Person(val firstName: String, val lastName: String) {
   println("the constructor beins")
   val fullName = firstName +" " + lastName

   val HOME = System.getProperty("user.home")

   def foo() { println("foo") }
   def printFullName { println(fullName)  }
   
   printFullName
   println("still in constructor")
}

class BankAccount() {
   private var currentBalance = 0
   def deposit(val amt: Double) currentBalance  += amt
   def withdraw(val amt: Double) { 
      if (amt <= currentBalance ) currentBalance -= amt
      else throw new Exception("low balance")
   }
   def balance = currentBalance
}

class Time(hrs: Int, min: Int) {
   private var hours = hrs
   private var minutes = min
   def before(other: Time): Boolean {
      val h = other.hours - this.hours
      val m = other.minutes - this.minute
      if(h < 0) true
      else if(m < 0) true
      else false
    }
}

class Time(private var hrs: Int, private var min: Int)
   def hours = hrs
   def minutes = min

   private val timeInternal = hrs * 60 + min
   def before(other: Time): Boolean = other.timeInternal < timeInternal
}

class Person(var age: Int) {
   if(age < 0) age = 0
}


class Person(name: String) {
//  val firstName = name.split("\\s")(0)
// val lastName  = name.split("\\s")(1)

   val Array(firstName, lastName) = name.split("\\s+")

  override def toString = "Person: "+ firstName +" "+lastName
}

class Car(val man: String, val mod: String) {
  val manuf = man
  val model = mod
  val year: Int = -1
  val plate: String = ""
  def this(val man: String, val mod: String, val year: Int=-1, val plate: String="") {
      this(man, mod)
      val year: Int = year
      val plate: String = plate
   }
} 

