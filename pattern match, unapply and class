
trait User { def name: String }
class FreeUser(val name: String) extends User
class PremiumUser(val name: String) extends User

object FreeUser {def unapply(user: FreeUser): Option[String] = Some(user.name) }
object PremiumUser { def unapply(user: PremiumUser): Option[String] = Some(user.name) }
// unapply method has to been defined using normal class

FreeUser.unapply(new FreeUser("Daniel"))
val user: User = new PremiumUser("Daniel")
user match {
   case FreeUser(name) => "Hello" + name
   case PremiumUser(name) => "Welcome back, dear " + name
}

val user2: User = new FreeUser("Daniel")
user2 match {
   case FreeUser(name) => "Hello " + name
   case PremiumUser(name) => "Welcome back, dear " + name
}

// unapply method is defined automatically for case class
abstract class Item
case class Article(desc: String, price: Double) extends Item
case class Bundle(desc: String, discount: Double, items: Item*) extends Item

val book = Article("Scala for impatient", 39.95)
val gift = Bundle("xmas special", 10, book, Article("wine", 79.95))

def price(it: Item): Double = it match { case Article(_, p) => p }
